name: CI

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    container: python:3.10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 仅在 GitHub（非 act）环境安装 Node 20，给 JS Actions 用
      - name: Install Node.js 20 (only on GitHub)
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        run: |
          apt-get update
          apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          node -v

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install coverage

      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover -s tests
          coverage report
          coverage xml

      # act 本地：保存覆盖率报告到仓库目录
      - name: Save coverage report locally (act)
        if: ${{ env.ACT || startsWith(runner.name, 'Act') }}
        run: |
          mkdir -p artifacts/coverage-report
          cp coverage.xml artifacts/coverage-report/

      # GitHub：上传覆盖率报告（需要 Node）
      - name: Upload coverage report
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          if-no-files-found: error

      # 仅在 GitHub 上上传到 Codecov（本地 act 跳过）
      - name: Upload to Codecov
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: unittests
          fail_ci_if_error: true

  build-package:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    container: python:3.10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 仅在 GitHub 安装 Node 20，供 upload-artifact 使用
      - name: Install Node.js 20 (only on GitHub)
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        run: |
          apt-get update
          apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          node -v

      - name: Install build tools & deps
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine
          pip install .

      - name: Clean dist
        run: rm -rf dist build *.egg-info

      - name: Build package
        run: python setup.py sdist bdist_wheel
        # 亦可用更现代方案：
        # run: |
        #   python -m pip install build
        #   python -m build

      # act 本地：保存 dist 全量到仓库目录
      - name: Save dist locally (act)
        if: ${{ env.ACT || startsWith(runner.name, 'Act') }}
        run: |
          mkdir -p artifacts/lazy_flask-dist
          cp -r dist/* artifacts/lazy_flask-dist/

      # GitHub：上传整个 dist 目录（包含 .tar.gz 与 .whl）
      - name: Upload dist package
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        uses: actions/upload-artifact@v4
        with:
          name: lazy_flask-dist
          path: dist/
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: build-package
    container: python:3.10
    # 仅打 tag 时发布
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 仅在 GitHub 安装 Node 20，供 download-artifact 使用
      - name: Install Node.js 20 (only on GitHub)
        if: ${{ !env.ACT && !startsWith(runner.name, 'Act') }}
        run: |
          apt-get update
          apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          node -v

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download dist package
        uses: actions/download-artifact@v4
        with:
          name: lazy_flask-dist
          path: dist

      - name: Publish to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload --username __token__ --password "$TWINE_PASSWORD" dist/*